# -*- coding: utf-8 -*-
"""RestaurantRecommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XKT7X-B4gRolJ9nTYXApkQsRpK0RsXj7
"""

print("1")

import pandas as pd
import numpy as np

df = pd.read_csv('content\zomato.csv')
df.sample(5)

print("2")

df.columns.unique()

df.describe()

df.info()

df.shape

df['menu_item'][0]

df.duplicated().sum()

# rate should be changed from fraction to just a float type number and multiply by votes - done
# Phone number should be dropped - done
# remove address - done
# remove online order
# drop menu item
# rename some columns

print("3")

df = df.drop(columns = ['menu_item'])

df.shape

df = df[df['rate'].str.contains('/') == True]

def rating_change(sentence):
  list1 = sentence.split('/')
  rating = float(str(list1[0]))
  return(rating)

df['rate'] = df['rate'].apply(rating_change).astype(float)

print("4")

df.sample(5)

df.info()

df['rate'] = df['rate']*df['votes']

df.drop(columns = ['votes'], inplace = True)

df.sample(5)

df.drop(columns = ['phone', 'address', 'online_order','book_table', 'approx_cost(for two people)','listed_in(type)','listed_in(city)'], inplace = True)
df.sample(5)

df.reset_index(drop = True)

df.shape

df.sample(5)

print("5")

# columns to be joined - rate, rest_type, dish_liked, cuisines, reviews_list, listed_in(type), listed_in(city)
# columns to be preserved for further usage

df.info()

df.sample(5)

df = df[df['url'].str.startswith('https://www.zomato.com') == True]

df.shape

df.sample(10)

df['rest_type'] = df['rest_type'].astype(str)

df['rest_type'] = df['rest_type'].apply(lambda x: x.replace(' ','')).astype(str)

df.shape

df.sample(10)

type(df['dish_liked'][0])

df['dish_liked'] = df['dish_liked'].astype(str)
df['dish_liked'] = df['dish_liked'].apply(lambda x: x.replace(' ',''))

type(df['dish_liked'][0])

df.sample(5)

df.shape

print("6")

df['cuisines'] = df['cuisines'].astype(str)
df['cuisines'] = df['cuisines'].apply(lambda x: x.replace(' ',''))

df.shape

df.sample(3)

type(df['reviews_list'][0])

df.sample(5)

df['reviews_list'][34166]

print("7")

import re

def reg_remove(sentence):
  pattern = re.compile(r'[^a-zA-Z ]')
  x=re.sub(pattern,"",sentence)
  return x

print("8")

df['reviews_list'] = df['reviews_list'].apply(reg_remove)

df.sample(5)

df['reviews_list'] = df['reviews_list'].apply(lambda x: x.replace('RATED',''))
df['reviews_list'] = df['reviews_list'].apply(lambda x: x.replace('Rated',''))

df.sample(5)

df['rate'] = df['rate'].apply(lambda x: str(x))

df['tags'] = df['rest_type']+' '+df['dish_liked']+' '+df['cuisines']+' '+df['reviews_list']+' '+df['rate']

df.sample(5)

df = df[['url','location','name','tags']]

df.sample(5)

df.shape

df['tags'] = df['tags'].str.lower()

df.sample(5)

print("9")

# # stemming
# import nltk
# from nltk.stem.porter import PorterStemmer

# ps = PorterStemmer()

# def stemming(sentence):
#   y = []
#   for i in sentence.split():
#     y.append(ps.stem(i))
#   return(" ".join(y))

# df['tags'] = df['tags'].apply(stemming)

# df.sample(5)

# from sklearn.feature_extraction.text import TfidfVectorizer

# tf_idf = TfidfVectorizer(max_features=3000, stop_words = 'english')

# vectors = tf_idf.fit_transform(df['tags']).toarray()

# from sklearn.metrics.pairwise import cosine_similarity

# similarity = cosine_similarity(vectors)

def combine_same(sentence):
    temp_df = df[df['name'] == sentence]
    new_tags = ""
    for i in temp_df['tags']:
        new_tags += i
    return new_tags

unique_names = df['name'].unique()
df_new = pd.DataFrame({'name': unique_names})
df_new['tags'] = df_new['name'].apply(combine_same)

print("10")

df.sample(5)

df_new.sample(5)

df_new.shape

# stemming
import nltk
from nltk.stem.porter import PorterStemmer

ps = PorterStemmer()

print("11")

def stemming(sentence):
  y = []
  for i in sentence.split():
    y.append(ps.stem(i))
  return(" ".join(y))

print("12")

df_new['tags'] = df_new['tags'].apply(stemming)

from sklearn.feature_extraction.text import TfidfVectorizer

tf_idf = TfidfVectorizer(max_features=3000, stop_words = 'english')

vectors = tf_idf.fit_transform(df_new['tags']).toarray()

print("13")

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors)

print("14")

import pickle

pickle.dump(df_new, open('data.pkl','wb'))
pickle.dump(similarity, open('similarity.pkl','wb'))

print("15")